// Generated by CoffeeScript 1.4.0
var animate, camera, cameraTarget, cubeData, engine, findTextures, geometry, init, material, materials, n, renderer, scene, size, stats, testImageUrl, textureLookup, textures, _ref;

stats = xStats({
  width: 200,
  height: 130
});

$(stats.element).css({
  position: "absolute",
  right: 0,
  top: 0
}).appendTo("body");

_ref = [], camera = _ref[0], scene = _ref[1], renderer = _ref[2], geometry = _ref[3], material = _ref[4];

size = 8;

findTextures = function(key) {
  if (key === '-') {
    return;
  }
  return [].concat(textureLookup[key]).map(function(textureIndex) {
    return materials[textureIndex];
  }).wrap(0, 6);
};

textureLookup = {
  D: 2,
  G: [77, 77, 78, 2, 77, 77],
  P: [118, 118, 102, 118, 119, 118],
  W: [20, 20, 21, 21, 20, 20]
};

cubeData = ["G G D D D D G G\nG G D D D D G G\nD D D D D D D D\nD D D D D D D D\nD D D D D D D D\nD D D D D D D D\nG G D D D D G G\nG G D D D D G G", "- - - - - - - P\n- - P - - - - -\n- - - W - - P -\n- - - - - P - -\n- P - - - - - -\n- - - - P - - -\n- - - P - - - -\nP - - - - - - -", "- - - - - - - -\n- - - - - - - -\n- - - W - - - -\n- - - - - - - -\n- - - - - - - -\n- - - - - - - -\n- - - - - - - -\n- - - - - - - -"].map(function(plane) {
  return plane.split("\n").map(function(row) {
    return row.split(" ");
  });
});

$("canvas").remove();

testImageUrl = ResourceLoader.urlFor("images", "terrain");

textures = [];

materials = [];

n = 16;

n.times(function(y) {
  return n.times(function(x) {
    var texture;
    texture = THREE.ImageUtils.loadTexture(testImageUrl);
    texture.offset.x = (1 / n) * x;
    texture.offset.y = (1 / n) * ((n - 1) - y);
    texture.repeat.x = 1 / n;
    texture.repeat.y = 1 / n;
    return textures.push(texture);
  });
});

init = function() {
  var height, width;
  width = App.width, height = App.height;
  camera = new THREE.PerspectiveCamera(75, width / height, 1, 10000);
  camera.position.z = 100;
  camera.position.y = 25;
  camera.position.x = 0;
  scene = new THREE.Scene();
  materials = textures.map(function(texture) {
    return new THREE.MeshBasicMaterial({
      wireframe: false,
      map: texture,
      overdraw: true
    });
  });
  cubeData.each(function(plane, y) {
    return plane.each(function(row, z) {
      return row.each(function(c, x) {
        var cube, surfaceTextures;
        if (surfaceTextures = findTextures(c)) {
          geometry = new THREE.CubeGeometry(size, size, size, 1, 1, 1);
          cube = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial(surfaceTextures));
          cube.position.y = size * (y - 4);
          cube.position.x = size * (x - 4);
          cube.position.z = size * (z - 4);
          return scene.add(cube);
        }
      });
    });
  });
  renderer = new THREE.WebGLRenderer({
    antialias: true
  });
  renderer.setSize(width, height);
  return document.body.appendChild(renderer.domElement);
};

animate = function() {
  requestAnimationFrame(animate);
  return renderer.render(scene, camera);
};

init();

animate();

engine = Engine();

cameraTarget = new THREE.Vector3(0, 0, 0);

engine.bind("update", function() {
  if (keydown.right) {
    camera.position.x += 1;
  }
  if (keydown.left) {
    camera.position.x -= 1;
  }
  if (keydown.up) {
    camera.position.y += 1;
  }
  if (keydown.down) {
    camera.position.y -= 1;
  }
  return camera.lookAt(cameraTarget);
});

engine.start();
